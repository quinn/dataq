package pages

import (
	"encoding/base64"
	"fmt"
	"github.com/labstack/echo/v4"
	"go.quinn.io/dataq/htmx"
	"go.quinn.io/dataq/index"
	"go.quinn.io/dataq/internal/middleware"
	"go.quinn.io/dataq/ui"
	"io"
	"net/http"
)

type BlobHashData struct {
	hash        string
	contentType string
	content     any
	rels        []index.Rel
}

func BlobHashGET(c echo.Context, hash string) (BlobHashData, error) {
	b := middleware.GetBoot(c)
	r, err := b.CAS.Retrieve(c.Request().Context(), hash)
	var data BlobHashData

	if err != nil {
		return data, err
	}

	bytes, err := io.ReadAll(r)
	if err != nil {
		return data, err
	}

	data.contentType = http.DetectContentType(bytes)
	data.hash = hash

	if data.contentType == "text/plain; charset=utf-8" {
		if len(bytes) > 0 && bytes[0] == '{' {
			data.contentType = "application/json"
			data.content = bytes
		} else {
			data.content = string(bytes)
		}
	} else {
		data.content = "data:" + data.contentType + ";base64," + base64.StdEncoding.EncodeToString(bytes)
	}

	data.rels, err = b.Index.GetRels(c.Request().Context(), hash)
	if err != nil {
		return data, fmt.Errorf("failed to get rels: %w", err)
	}

	return data, nil
}

func BlobHashDELETE(c echo.Context, hash string) error {
	b := middleware.GetBoot(c)
	if err := b.CAS.Delete(c.Request().Context(), hash); err != nil {
		return fmt.Errorf("error deleting content: %w", err)
	}

	return htmx.Redirect(c, "/")
}

templ BlobHash(data BlobHashData) {
	@ui.Layout() {
		<div class="space-y-3">
			<div class="font-bold">{ data.hash }</div>
			<div class="font-bold">Content Type</div>
			<div>{ data.contentType }</div>
			<hr/>
			<div class="font-bold">Content</div>
			if data.contentType == "application/json" {
				@ui.JsonBrowser(data.content)
			} else if data.contentType == "text/plain; charset=utf-8" {
				<pre>{ data.content.(string) }</pre>
			} else {
				<img src={ data.content.(string) }/>
			}
			<hr/>
			<div class="font-bold">Links</div>
			<ul class="list-disc list-inside">
				for _, rel := range data.rels {
					<li class="list-item">
						<a href={ templ.URL("/content/" + rel.Hash) }>{ rel.Type }</a>
					</li>
				}
			</ul>
			<hr/>
			<div class="font-bold">Actions</div>
			<ul class="list-disc list-inside">
				<li class="list-item">
					<button hx-delete class="text-red-700 underline">
						Delete
					</button>
				</li>
			</ul>
		</div>
	}
}
