package pages

import (
	"fmt"
	"github.com/labstack/echo/v4"
	"go.quinn.io/dataq/config"
	"go.quinn.io/dataq/internal/middleware"
	"go.quinn.io/dataq/rpc"
	"go.quinn.io/dataq/schema"
	"go.quinn.io/dataq/ui"
	"net/http"
	"strings"
)

type PluginInstallData struct {
	install  *rpc.InstallResponse
	cfg      *config.Plugin
	plugins  []*config.Plugin
	selected string
}

func PluginInstallGET(c echo.Context) (PluginInstallData, error) {
	b := middleware.GetBoot(c)
	data := PluginInstallData{}
	pluginID := c.QueryParam("plugin")
	data.plugins = b.Config.Plugins

	if pluginID != "" {
		for _, plugin := range b.Config.Plugins {
			if plugin.ID == pluginID {
				data.cfg = plugin
			}
		}

		client, ok := b.Plugins.Clients[pluginID]
		if !ok {
			return data, fmt.Errorf("plugin not found: %s", pluginID)
		}

		data.selected = pluginID
		var err error
		data.install, err = client.Install(c.Request().Context(), &rpc.InstallRequest{PluginId: pluginID})
		if err != nil {
			return data, fmt.Errorf("failed to install plugin: %w", err)
		}
	}

	return data, nil
}

func PluginInstallPOST(c echo.Context) error {
	b := middleware.GetBoot(c)

	var form struct {
		AuthURL      string `form:"auth_url"`
		TokenURL     string `form:"token_url"`
		Scopes       string `form:"scopes"`
		PluginID     string `form:"plugin_id"`
		ClientID     string `form:"client_id"`
		ClientSecret string `form:"client_secret"`
	}

	if err := c.Bind(&form); err != nil {
		return fmt.Errorf("failed to bind form: %v", err)
	}

	client, ok := b.Plugins.Clients[form.PluginID]
	if !ok {
		return fmt.Errorf("plugin not found: %s", form.PluginID)
	}

	install, err := client.Install(c.Request().Context(), &rpc.InstallRequest{PluginId: form.PluginID})
	if err != nil {
		return fmt.Errorf("failed to install plugin: %w", err)
	}

	config := make(map[string]string)
	for _, configField := range install.Configs {
		val := c.FormValue(configField.Key)
		config[configField.Key] = val
	}

	pluginInstance := schema.PluginInstance{
		PluginID:        form.PluginID,
		Label:           form.PluginID,
		Config:          config,
		InstallResponse: install,
		Oauth: &rpc.OAuth2{
			Config: &rpc.OAuth2_Config{
				Scopes:       strings.Split(form.Scopes, ","),
				ClientId:     form.ClientID,
				ClientSecret: form.ClientSecret,

				Endpoint: &rpc.OAuth2_Endpoint{
					AuthUrl:  form.AuthURL,
					TokenUrl: form.TokenURL,
				},
			},
		},
	}

	permanodeHash, err := b.Index.CreatePermanode(c.Request().Context(), &pluginInstance)
	if err != nil {
		return fmt.Errorf("failed to create permanode: %v", err)
	}

	return c.Redirect(http.StatusFound, "/plugin/"+permanodeHash+"/oauth/begin")
}

templ PluginInstall(data PluginInstallData) {
	@ui.Layout() {
		<div class="space-y-3">
			<div class="font-bold">Install</div>
			<form
				action={ templ.URL("/plugin/install") }
				method="get"
				onchange="this.submit()"
			>
				<select name="plugin" class="input">
					<option value="">Select Plugin</option>
					for _, plugin := range data.plugins {
						<option value={ plugin.ID } selected?={ plugin.ID == data.selected } disabled?={ !plugin.Enabled }>{ plugin.ID }</option>
					}
				</select>
			</form>
			<hr/>
			if data.cfg != nil {
				<div class="font-bold">Config</div>
				<form method="post">
					<input type="hidden" name="plugin_id" value={ data.selected }/>
					for _, config := range data.install.Configs {
						<div class="space-y-1">
							<label for={ config.Key }>{ config.Label }</label>
							<input
								class="input"
								type="text"
								name={ config.Key }
							/>
						</div>
					}
					if data.install.Oauth.Config != nil {
						<input type="hidden" name="auth_url" value={ data.install.Oauth.Config.Endpoint.AuthUrl }/>
						<input type="hidden" name="token_url" value={ data.install.Oauth.Config.Endpoint.TokenUrl }/>
						<input type="hidden" name="scopes" value={ strings.Join(data.install.Oauth.Config.Scopes, ",") }/>
						<label class="block" for="client_id">Client ID</label>
						<input class="input mb-3" type="text" name="client_id"/>
						<label class="block" for="client_secret">Client Secret</label>
						<input class="input mb-3" type="text" name="client_secret"/>
						<button class="underline block" type="submit">Install & Connect Oauth</button>
					} else {
						<button class="underline block" type="submit">Install</button>
					}
				</form>
			}
		</div>
	}
}
