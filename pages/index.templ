package pages

import (
	"fmt"
	"github.com/labstack/echo/v4"
	"go.quinn.io/dataq/internal/middleware"
	"go.quinn.io/dataq/schema"
	"go.quinn.io/dataq/ui"
)

type IndexData struct {
	Contents []schema.Claim
	Plugins  []schema.Claim
}

func IndexGET(c echo.Context) (*IndexData, error) {
	b := middleware.GetBoot(c)

	sel := b.Index.Q.
		GroupBy("permanode_hash").
		Where("schema_kind = ?", "PluginInstance").
		OrderBy("timestamp DESC")
	plugins, err := b.Index.Query(c.Request().Context(), sel)
	if err != nil {
		return nil, fmt.Errorf("failed to query plugins: %w", err)
	}

	sel = b.Index.Q.
		Where("content_hash IS NOT NULL AND content_hash != ''").
		OrderBy("timestamp DESC")
	claims, err := b.Index.Query(c.Request().Context(), sel)
	if err != nil {
		return nil, fmt.Errorf("failed to query contents: %w", err)
	}

	return &IndexData{
		Contents: claims,
		Plugins:  plugins,
	}, nil
}

templ Index(data *IndexData) {
	@ui.Layout() {
		<div class="space-y-3">
			<div class="font-bold">Plugins</div>
			<ul class="list-disc list-inside">
				for _, plugin := range data.Plugins {
					<li class="list-item">
						<a href={ templ.URL("/plugin/" + plugin.PermanodeHash + "/edit") } class="underline">
							{ plugin.Metadata["label"].(string) }
						</a>
					</li>
				}
			</ul>
			<hr/>
			<div class="font-bold">Content</div>
			<ul class="list-disc list-inside">
				for _, claim := range data.Contents {
					<li class="list-item">
						<a href={ templ.URL("/content/" + claim.ContentHash) } class="underline">
							{ claim.SchemaKind }
						</a>
						-
						<a href={ templ.URL("/blob/" + claim.ContentHash) } class="underline">
							{ claim.ContentHash }
						</a>
						if claim.PermanodeHash != "" {
							-
							<a href={ templ.URL("/blob/" + claim.PermanodeHash) } class="underline">
								{ claim.PermanodeHash }
							</a>
						}
					</li>
				}
			</ul>
		</div>
	}
}
