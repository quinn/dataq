package pages

import (
	"github.com/labstack/echo/v4"
	"go.quinn.io/dataq/internal/middleware"
	"go.quinn.io/dataq/schema"
	"go.quinn.io/dataq/ui"
)

type IndexData struct {
	Hashes  []string
	Plugins []schema.Claim
}

func IndexGET(c echo.Context) (*IndexData, error) {
	b := middleware.GetBoot(c)

	sel := b.Index.Q.
		GroupBy("permanode_hash").
		Where("schema_kind = ?", "PluginInstance").
		OrderBy("timestamp DESC")
	plugins, err := b.Index.Query(c.Request().Context(), sel)
	if err != nil {
		return nil, err
	}

	hashes, err := b.CAS.Iterate(c.Request().Context())
	// items, err := b.Tree.Children("")
	if err != nil {
		return nil, err
	}

	var items []string
	for hash := range hashes {
		items = append(items, hash)
	}

	return &IndexData{
		Hashes:  items,
		Plugins: plugins,
	}, nil
}

templ Index(data *IndexData) {
	@ui.Layout() {
		<div class="space-y-3">
			<div class="font-bold">Plugins</div>
			<ul class="list-disc list-inside">
				for _, plugin := range data.Plugins {
					<li class="list-item">
						<a href={ templ.URL("/plugin/" + plugin.PermanodeHash + "/edit") } class="underline">
							{ plugin.Metadata["label"].(string) }
						</a>
					</li>
				}
			</ul>
			<hr/>
			<div class="font-bold">Content</div>
			<ul class="list-disc list-inside">
				for _, hash := range data.Hashes {
					<li class="list-item">
						<a href={ templ.URL("/content/" + hash) } class="underline">
							{ hash }
						</a>
					</li>
				}
			</ul>
		</div>
	}
}
