package pages

import (
	"fmt"
	"github.com/Masterminds/squirrel"
	"github.com/labstack/echo/v4"
	"go.quinn.io/dataq/boot"
	"go.quinn.io/dataq/htmx"
	"go.quinn.io/dataq/internal/middleware"
	"go.quinn.io/dataq/rpc"
	"go.quinn.io/dataq/ui"
	"io"
)

type SchemaExtractRequestHashData struct {
	req *rpc.ExtractRequest
	res []struct {
		res  *rpc.ExtractResponse
		data []byte
	}
	hash string
}

func SchemaExtractRequestHashGET(c echo.Context, hash string) (SchemaExtractRequestHashData, error) {
	var data SchemaExtractRequestHashData
	b := middleware.GetBoot(c)

	var req rpc.ExtractRequest
	sel := b.Index.Q.Where("content_hash = ?", hash)
	if err := b.Index.Get(c.Request().Context(), &req, sel); err != nil {
		return data, fmt.Errorf("extract request not found: %w", err)
	}

	sel = b.Index.Q.Where("request_hash = ?", hash)
	claims, err := b.Index.Query(c.Request().Context(), sel)
	if err != nil {
		return data, fmt.Errorf("failed to query response claims: %w", err)
	}

	for _, claim := range claims {
		var res rpc.ExtractResponse
		sel := b.Index.Q.Where("content_hash = ?", claim.ContentHash)
		if err := b.Index.Get(c.Request().Context(), &res, sel); err != nil {
			return data, fmt.Errorf("extract response not found (%s): %w", claim.ContentHash, err)
		}

		r, err := b.CAS.Retrieve(c.Request().Context(), res.GetHash())
		if err != nil {
			return data, fmt.Errorf("failed to retrieve response data: %w", err)
		}
		d, err := io.ReadAll(r)
		if err != nil {
			return data, fmt.Errorf("failed to read response data: %w", err)
		}
		data.res = append(data.res, struct {
			res  *rpc.ExtractResponse
			data []byte
		}{res: &res, data: d})
	}

	data.req = &req
	data.hash = hash
	return data, nil
}

func SchemaExtractRequestHashPOST(c echo.Context, hash string) error {
	b := c.Get("boot").(*boot.Boot)

	var req rpc.ExtractRequest
	sel := b.Index.Q.Where(squirrel.Eq{"content_hash": hash})
	if err := b.Index.Get(c.Request().Context(), &req, sel); err != nil {
		return fmt.Errorf("error getting request from index: %w", err)
	}

	plugin, err := b.Repo.GetPluginInstance(c.Request().Context(), req.PluginId)
	if err != nil {
		return fmt.Errorf("error getting plugin instance: %w", err)
	}

	client, ok := b.Plugins.Clients[plugin.PluginID]
	if !ok {
		var keys []string
		for k := range b.Plugins.Clients {
			keys = append(keys, k)
		}
		return fmt.Errorf("plugin not found: %s. Plugin IDs are: %v", plugin.PluginID, keys)
	}

	if _, err := client.Extract(c.Request().Context(), plugin, &req); err != nil {
		return fmt.Errorf("error extracting: %w", err)
	}

	return htmx.Refresh(c)
}

templ SchemaExtractRequestHash(data SchemaExtractRequestHashData) {
	@ui.Layout() {
		<div class="space-y-3">
			@ui.JsonBrowser(data.req)
			<hr/>
			<div class="font-bold">Responses</div>
			<ul class="list-disc list-inside">
				for _, res := range data.res {
					<li class="list-item">
						@ui.JsonBrowser(res.res)
						Data
						@ui.JsonBrowser(res.data)
					</li>
				}
			</ul>
			<hr/>
			<div class="font-bold">Actions</div>
			<ul class="list-disc list-inside">
				<li class="list-item">
					<button hx-post class="underline">Send</button>
				</li>
			</ul>
		</div>
	}
}
