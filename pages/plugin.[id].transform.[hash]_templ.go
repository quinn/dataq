// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"github.com/labstack/echo/v4"
	"go.quinn.io/dataq/htmx"
	"go.quinn.io/dataq/internal/middleware"
	"go.quinn.io/dataq/rpc"
	"go.quinn.io/dataq/ui"
)

type PluginIdTransformHashData struct {
	req  *rpc.TransformRequest
	res  []*rpc.TransformResponse
	hash string
	id   string
}

func PluginIdTransformHashGET(c echo.Context, id, hash string) (PluginIdTransformHashData, error) {
	ctx := c.Request().Context()
	var data PluginIdTransformHashData
	b := middleware.GetBoot(c)

	var req rpc.TransformRequest
	if err := b.Repo.GetContent(ctx, hash, &req); err != nil {
		return data, fmt.Errorf("transform request not found: %w", err)
	}

	sel := b.Index.Q.Where("request_hash = ?", hash)
	claims, err := b.Index.Query(ctx, sel)
	if err != nil {
		return data, fmt.Errorf("failed to query response claims: %w", err)
	}

	for _, claim := range claims {
		var r rpc.TransformResponse
		if err := b.Repo.GetContent(ctx, claim.ContentHash, &r); err != nil {
			return data, fmt.Errorf("transform response not found (%s): %w", claim.ContentHash, err)
		}
		data.res = append(data.res, &r)
	}

	data.req = &req
	data.hash = hash
	data.id = id
	return data, nil
}

func PluginIdTransformHashPOST(c echo.Context, id, hash string) error {
	ctx := c.Request().Context()
	b := middleware.GetBoot(c)

	in, err := b.Repo.GetPluginInstance(ctx, id)
	if err != nil {
		return fmt.Errorf("failed to get plugin instance: %w", err)
	}

	plugin, ok := b.Plugins.Clients[in.PluginID]
	if !ok {
		return fmt.Errorf("plugin not found: %s", id)
	}

	var req rpc.TransformRequest
	if err := b.Repo.GetContent(ctx, hash, &req); err != nil {
		return fmt.Errorf("error getting request from index: %w", err)
	}

	if _, err := plugin.Transform(ctx, &req); err != nil {
		return fmt.Errorf("error transforming: %w", err)
	}

	return htmx.Refresh(c)
}

func PluginIdTransformHash(data PluginIdTransformHashData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"space-y-3\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = ui.JsonBrowser(data.req).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<hr><div class=\"font-bold\">Responses</div><ul class=\"list-disc list-inside\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, res := range data.res {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<li class=\"list-item\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = ui.JsonBrowser(res).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</li>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</ul><hr><div class=\"font-bold\">Actions</div><ul class=\"list-disc list-inside\"><li class=\"list-item\"><form method=\"post\" class=\"inline\" hx-boost=\"true\"><button type=\"submit\" class=\"underline\">Send</button></form></li></ul></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return nil
		})
		templ_7745c5c3_Err = ui.Layout().Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
