package pages

import (
	"fmt"
	"github.com/labstack/echo/v4"
	"go.quinn.io/dataq/config"
	"go.quinn.io/dataq/internal/middleware"
	"go.quinn.io/dataq/schema"
	"go.quinn.io/dataq/ui"
)

type PluginIdData struct {
	cfg        *config.Plugin
	extracts   []schema.Claim
	transforms []schema.Claim
}

func PluginIdHandler(c echo.Context, id string) (PluginIdData, error) {
	b := middleware.GetBoot(c)

	var data PluginIdData

	var plugin *config.Plugin
	for _, p := range b.Config.Plugins {
		if p.ID == id {
			plugin = p
			break
		}
	}

	if plugin == nil {
		return data, echo.ErrNotFound
	}

	data.cfg = plugin

	var err error
	data.extracts, err = b.Index.Query(c.Request().Context(), "plugin_id = ? AND schema_kind = ?", id, "ExtractRequest")
	if err != nil {
		return data, err
	}

	data.transforms, err = b.Index.Query(c.Request().Context(), "plugin_id = ? AND schema_kind = ?", id, "TransformRequest")
	if err != nil {
		return data, err
	}

	return data, nil
}

// type Plugin struct {
// 	ID         string            `yaml:"id"`
// 	Name       string            `yaml:"name"`
// 	BinaryPath string            `yaml:"binary_path"`
// 	Config     map[string]string `yaml:"config"`
// 	Enabled    bool              `yaml:"enabled"`
// }
templ PluginId(data PluginIdData) {
	@ui.Layout() {
		<h1 class="font-bold inline-block mb-3">
			<dl class="inline-grid grid-cols-[min-content,1fr] gap-x-3 whitespace-nowrap">
				<dt>ID</dt>
				<dd>{ data.cfg.ID }</dd>
				<dt>Name</dt>
				<dd>{ data.cfg.Name }</dd>
				<dt>Binary Path</dt>
				<dd>{ data.cfg.BinaryPath }</dd>
				<dt>Config</dt>
				<dd>
					<dl class="inline-grid grid-cols-[min-content,1fr] gap-x-3">
						for key, value := range data.cfg.Config {
							<dt>{ key }</dt>
							<dd>{ value }</dd>
						}
					</dl>
				</dd>
				<dt>Enabled</dt>
				<dd>{ fmt.Sprintf("%t", data.cfg.Enabled) }</dd>
			</dl>
		</h1>
		<hr class="mb-3"/>
		<h3 class="font-bold mb-3">Extracts</h3>
		<ul class="list-disc list-inside mb-3">
			for _, extract := range data.extracts {
				<li class="list-item">
					<a href={ templ.URL("/plugin/" + data.cfg.ID + "/extract/" + extract.ContentHash) } class="underline">
						{ extract.Metadata["kind"].(string) }
					</a>
					<span>- </span>
					<a href={ templ.URL("/content/" + extract.ContentHash) } class="underline">
						{ extract.ContentHash }
					</a>
				</li>
			}
		</ul>
		<hr class="mb-3"/>
		<h3 class="font-bold mb-3">Transforms</h3>
		<ul class="list-disc list-inside mb-3">
			for _, transform := range data.transforms {
				<li class="list-item">
					<a href={ templ.URL("/plugin/" + data.cfg.ID + "/transform/" + transform.ContentHash) } class="underline">
						{ transform.Metadata["kind"].(string) }
					</a>
					<span>- </span>
					<a href={ templ.URL("/content/" + transform.ContentHash) } class="underline">
						{ transform.ContentHash }
					</a>
				</li>
			}
		</ul>
		<hr class="mb-3"/>
		<h2 class="font-bold mb-3">Actions</h2>
		<ul class="list-disc list-inside">
			<li class="list-item">
				<button hx-post={ "/plugin/" + data.cfg.ID + "/extract/initial" } class="underline cursor-pointer">
					Send Initial Event
				</button>
			</li>
		</ul>
	}
}
