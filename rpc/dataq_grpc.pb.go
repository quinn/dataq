// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: rpc/dataq.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataQPlugin_Install_FullMethodName   = "/dataq.DataQPlugin/Install"
	DataQPlugin_Extract_FullMethodName   = "/dataq.DataQPlugin/Extract"
	DataQPlugin_Transform_FullMethodName = "/dataq.DataQPlugin/Transform"
)

// DataQPluginClient is the client API for DataQPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for DataQ plugin interface
type DataQPluginClient interface {
	Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error)
	// Handle extract requests
	Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*ExtractResponse, error)
	// Handle transform requests
	Transform(ctx context.Context, in *TransformRequest, opts ...grpc.CallOption) (*TransformResponse, error)
}

type dataQPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewDataQPluginClient(cc grpc.ClientConnInterface) DataQPluginClient {
	return &dataQPluginClient{cc}
}

func (c *dataQPluginClient) Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstallResponse)
	err := c.cc.Invoke(ctx, DataQPlugin_Install_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataQPluginClient) Extract(ctx context.Context, in *ExtractRequest, opts ...grpc.CallOption) (*ExtractResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtractResponse)
	err := c.cc.Invoke(ctx, DataQPlugin_Extract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataQPluginClient) Transform(ctx context.Context, in *TransformRequest, opts ...grpc.CallOption) (*TransformResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransformResponse)
	err := c.cc.Invoke(ctx, DataQPlugin_Transform_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataQPluginServer is the server API for DataQPlugin service.
// All implementations must embed UnimplementedDataQPluginServer
// for forward compatibility.
//
// Service definition for DataQ plugin interface
type DataQPluginServer interface {
	Install(context.Context, *InstallRequest) (*InstallResponse, error)
	// Handle extract requests
	Extract(context.Context, *ExtractRequest) (*ExtractResponse, error)
	// Handle transform requests
	Transform(context.Context, *TransformRequest) (*TransformResponse, error)
	mustEmbedUnimplementedDataQPluginServer()
}

// UnimplementedDataQPluginServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataQPluginServer struct{}

func (UnimplementedDataQPluginServer) Install(context.Context, *InstallRequest) (*InstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (UnimplementedDataQPluginServer) Extract(context.Context, *ExtractRequest) (*ExtractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Extract not implemented")
}
func (UnimplementedDataQPluginServer) Transform(context.Context, *TransformRequest) (*TransformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transform not implemented")
}
func (UnimplementedDataQPluginServer) mustEmbedUnimplementedDataQPluginServer() {}
func (UnimplementedDataQPluginServer) testEmbeddedByValue()                     {}

// UnsafeDataQPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataQPluginServer will
// result in compilation errors.
type UnsafeDataQPluginServer interface {
	mustEmbedUnimplementedDataQPluginServer()
}

func RegisterDataQPluginServer(s grpc.ServiceRegistrar, srv DataQPluginServer) {
	// If the following call pancis, it indicates UnimplementedDataQPluginServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataQPlugin_ServiceDesc, srv)
}

func _DataQPlugin_Install_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataQPluginServer).Install(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataQPlugin_Install_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataQPluginServer).Install(ctx, req.(*InstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataQPlugin_Extract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataQPluginServer).Extract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataQPlugin_Extract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataQPluginServer).Extract(ctx, req.(*ExtractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataQPlugin_Transform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataQPluginServer).Transform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataQPlugin_Transform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataQPluginServer).Transform(ctx, req.(*TransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataQPlugin_ServiceDesc is the grpc.ServiceDesc for DataQPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataQPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dataq.DataQPlugin",
	HandlerType: (*DataQPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Install",
			Handler:    _DataQPlugin_Install_Handler,
		},
		{
			MethodName: "Extract",
			Handler:    _DataQPlugin_Extract_Handler,
		},
		{
			MethodName: "Transform",
			Handler:    _DataQPlugin_Transform_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/dataq.proto",
}
